# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVHH3I85TnGS9KuzHBdzdZMYupTDqnFJ
"""


import openai
import requests
import re
import nltk
from nltk.corpus import words
global essay
nltk.download("words")
openai.api_key = 'api'

def get_feedback_and_grade(essay):
    URL = "https://api.openai.com/v1/chat/completions"

    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "user", "content": essay},
            {"role": "assistant", "content": "Please provide feedback on how the writer can improve the essay"}
        ],
        "temperature": 0.7,
        "max_tokens": 100,
        "n": 1,
        "stream": False,
        "presence_penalty": 0,
        "frequency_penalty": 0,
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {openai.api_key}"
    }

    response = requests.post(URL, headers=headers, json=payload, stream=False)

    # Check if request was successful (status code 200)
    if response.status_code == 200:
        # Parse JSON response
        data = response.json()

        # Extract feedback and grade from the response
        feedback = data['choices'][0]['message']['content']

        return feedback
    else:
        print("Request was not successful. Status code:", response.status_code)
        return None
def remove_special_characters_and_commas(essay):
    # Define a regular expression pattern to match special characters and commas
        pattern = r'[^a-zA-Z0-9\s]'

    # Use re.sub() to replace matched patterns with an empty string
        cleaned_text = re.sub(pattern, '', essay)

        return cleaned_text
def calculate_grade(essay,cleaned_text):
      wrong_words_count = check_grammar(essay,cleaned_text)

      # Calculate the grade based on the number of wrong words
      grade = max(10 - (wrong_words_count / len(cleaned_text.split())) * 10, 0)

      return grade

def check_grammar(essay,cleaned_text):
    wrong_words_count = 0

    # Use a regular expression to match alphanumeric characters and apostrophes
    for word in re.findall(r'\b\w+\b', essay):
        if word.lower() not in words.words():
            wrong_words_count += 1

    return wrong_words_count

# Input essay interactively
def grade1(essay):
    cleaned_text=remove_special_characters_and_commas(essay)
    grade=calculate_grade(essay,cleaned_text)
    # Get feedback and grade for the essay
    feedback= get_feedback_and_grade(essay)

    # Print feedback and grade
    if feedback is not None:
        print("Feedback:", feedback)
        print("Grade:", grade, "/ 10")
    cleaned_text=remove_special_characters_and_commas(essay)
    grade=calculate_grade(essay,cleaned_text)
# Get feedback and grade for the essay
    feedback= get_feedback_and_grade(essay)
    # Print feedback and grade
    if feedback is not None:
        print("Feedback:", feedback)
        print("Grade:", grade, "/ 10")
        return grade